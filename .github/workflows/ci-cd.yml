name: Calculator App CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'

jobs:
  # Continuous Integration
  ci:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: üêç Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: üì¶ Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: üîß Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black bandit safety
    
    - name: üé® Code formatting check
      run: |
        black --check --diff app.py || echo "‚ö†Ô∏è Code formatting issues found"
      continue-on-error: true
    
    - name: üîç Lint with flake8
      run: |
        flake8 app.py --max-line-length=88 --ignore=E203,W503 || echo "‚ö†Ô∏è Linting issues found"
      continue-on-error: true
    
    - name: üîí Security scan with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || echo "‚ö†Ô∏è Security issues found"
      continue-on-error: true
    
    - name: üõ°Ô∏è Dependency security check
      run: |
        safety check --json --output safety-report.json || echo "‚ö†Ô∏è Dependency vulnerabilities found"
      continue-on-error: true
    
    - name: üè• Application health check
      run: |
        # Start the application in background
        python app.py &
        APP_PID=$!
        
        # Wait for app to start
        sleep 10
        
        # Simple health check
        curl -f http://localhost:5000/health || exit 1
        echo "‚úÖ Application started successfully!"
        
        # Stop the application
        kill $APP_PID || true
    
    - name: üìä Archive security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          *.json
        retention-days: 30

  # Deploy to Staging
  deploy-staging:
    needs: ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: 
      name: staging
      url: http://your-staging-server.com
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: üöÄ Deploy to Staging Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT || 22 }}
        script: |
          # Navigate to application directory
          cd /var/www/calculator-app
          
          # Pull latest code
          git pull origin develop
          
          # Create virtual environment if it doesn't exist
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          
          # Activate virtual environment and install dependencies
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Stop existing application
          sudo systemctl stop calculator-staging || true
          
          # Start application
          sudo systemctl start calculator-staging
          sudo systemctl enable calculator-staging
          
          # Wait and check health
          sleep 10
          curl -f http://localhost:5001/health || exit 1
          
          echo "‚úÖ Staging deployment completed successfully!"

  # Deploy to Production
  deploy-production:
    needs: ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: http://your-production-server.com
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: üöÄ Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          # Navigate to application directory
          cd /var/www/calculator-app
          
          # Create backup of current version
          sudo cp -r . ../calculator-app-backup-$(date +%Y%m%d_%H%M%S)
          
          # Pull latest code
          git pull origin main
          
          # Create virtual environment if it doesn't exist
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          
          # Activate virtual environment and install dependencies
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Stop existing application
          sudo systemctl stop calculator-prod
          
          # Start application
          sudo systemctl start calculator-prod
          sudo systemctl enable calculator-prod
          
          # Wait and check health
          sleep 10
          curl -f http://localhost:5000/health || exit 1
          
          echo "‚úÖ Production deployment completed successfully!"
    
    - name: üìß Notify deployment success
      if: success()
      run: |
        echo "üéâ Production deployment successful!"
        # Add notification logic here (Slack, email, etc.)
    
    - name: üìß Notify deployment failure
      if: failure()
      run: |
        echo "üí• Production deployment failed!"
        # Add failure notification logic here
